/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * VARIABLES
 * GRID DEFAULT
 * FLEX CELLS MODIFIER
 * GROUP WIDTH MODIFIERS
 * SINGLE WIDTH MODIFIERS
 * GUTTER MODIFIERS
 * GROUP ALIGNMENT MODIFIERS
 * SINGLE ALIGNMENT MODIFIERS
 * RESPONSIVE
 * HELP FIREFOX
*/





/*------------------------------------*\ 
    $VARIABLES
\*------------------------------------*/
/**
 * Flex Cells
 */
$grid--flex-cells: true;


/**
 * Group Alignment
 */
$grid--top: false;
$grid--bottom: false;
$grid--center: false;


/**
 * Single Alignment
 */
$grid__item--top: false;
$grid__item--bottom: false;
$grid__item--center: false;


/**
 * Group Width Sizes
 */
$grid--fit: false;
$grid--full: false;
$grid--halves: false;
$grid--thirds: true;
$grid--quarters: false;
$grid--fifths: false;


/**
 * Single Width Sizes
 */
$grid__item--full: true;
$grid__item--half: false;
$grid__item--third: false;
$grid__item--quarter: false;
$grid__item--fifth: true;


/**
 * Grid Gutters
 */
$gutters-small: true;
$gutters-medium: false;
$gutters-large: false;
$gutters-xlarge: false;


/**
 * Responsive
 */
$responsive: true;
$responsive-gutters: true;

/**
 * These came from CSS Wizardry Grids - http://csswizardry.com/csswizardry-grids/
 *
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--full`), the second value is the media query
 * that the breakpoint fires at.
 */
$breakpoints: (
    'palm' '(max-width: 480px)',
    'lap' '(min-width: 481px) and (max-width: 1023px)',
    'portable' '(max-width: 1023px)', // both lap and palm
    'desk' '(max-width: 1024px)',
    'wide' '(min-width:1500px)'
)!default;


/**
 * This list will make classes like .palm--full or .palm--grid-halves render in
 * the css. Your options are 'palm', 'lap', 'portable', 'desk', 'wide'.
 */
$breakpoint-has-widths: ('palm', 'lap')!default;





/*------------------------------------*\
    GRID DEFAULT
\*------------------------------------*/

.grid {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    padding: 0;
}

    .grid__item {
        flex: 1;
    }





/*------------------------------------*\ 
    $FLEX CELLS MODIFIER
\*------------------------------------*/
/**
 * Silent Extends
 */
%grid_flex_cells{
    display: flex;
}


/**
 * This will make all cells the same height
 *
 * Apply with the .grid class
 */

@if $grid--flex-cells == true{
    .grid--flex-cells {
        & > .grid__item {
            display: flex;
        }
    }
}





/*------------------------------------*\ 
    $GROUP WIDTH MODIFIERS
\*------------------------------------*/
/**
 * Silent Extends
 */
%grid_fit{
    > .grid__item {
        flex: 1;
    }
}

%grid_full{
    > .grid__item {
        flex: 0 0 100%;
    }
}

%grid_halves{
    > .grid__item {
        flex: 0 0 50%;
    }
}

%grid_thirds{
    > .grid__item {
        flex: 0 0 33.3333%;
    }
}

%grid_quarters{
    > .grid__item {
        flex: 0 0 25%;
    }
}

%grid_fifths{
    > .grid__item {
        flex: 0 0 20%;
    }
}

/**
 * If we need to set a specific width to all
 * cells in a grid use these classes
 *
 * Apply them with the .grid class.
 */
@if $grid--fit == true{
    .grid--fit{
        @extend %grid_fit;
    }
}

@if $grid--full == true{
    .grid--full{
        @extend %grid_full;
    }
}

@if $grid--halves == true{
    .grid--halves{
        @extend %grid_halves;
    }
}

@if $grid--thirds == true{
    .grid--thirds{
        @extend %grid_thirds;
    }
}

@if $grid--quarters == true{
    .grid--quarters{
        @extend %grid_quarters;
    }
}

@if $grid--fifths == true{
    .grid--fifths{
        @extend %grid_fifths;
    }
}






/*------------------------------------*\ 
    $SINGLE WIDTH MODIFIERS
\*------------------------------------*/
/**
 * Silent Extends
 */
%grid_item_full{
    width: 100%;
    flex: none !important;
}

%grid_item_half{
    width: 50%;
    flex: none !important;
}

%grid_item_third{
    width: 33.3333%;
    flex: none !important;
}

%grid_item_quarter{
    width: 25%;
    flex: none !important;
}

%grid_item_fifth{
    width: 20%;
    flex: none !important;
}


/**
 * We can set individual cell width with these
 * same location use these classes.
 *
 * Apply them with the .grid__item class.
 */
@if $grid__item--full == true{
    .grid__item--full{
        @extend %grid_item_full;
    }
}

@if $grid__item--half == true{
    .grid__item--half{
        @extend %grid_item_half;
    }
}

@if $grid__item--third == true{
    .grid__item--third{
        @extend %grid_item_third;
    }
}

@if $grid__item--quarter == true{
    .grid__item--quarter{
        @extend %grid_item_quarter;
    }
}

@if $grid__item--fifth == true{
    .grid__item--fifth{
        @extend %grid_item_fifth;
    }
}






/*------------------------------------*\ 
    $GUTTER MODIFIERS
\*------------------------------------*/
/**
 * Silent Extends
 */
%gutters_small{
    margin-left: -1em;
    & > .grid__item {
        padding-left: 1em;
        margin-bottom: 1em;
    }
}

%gutters_medium{
    margin-left: -1.5em;
    & > .grid__item {
        padding-left: 1.5em;
        margin-bottom: 1.5em;
    }
}

%gutters_large{
    margin-left: -2em;
    & > .grid__item {
        padding-left: 2em;
        margin-bottom: 2em;
    }
}

%gutters_xlarge{
    margin-left: -3em;
    & > .grid__item {
        padding-left: 3em;
        margin-bottom: 3em;
    }
}


/**
 * We can set individual grid gutter width with these.
 *
 * Apply them with the .grid class.
 */
@if $gutters-small == true{
    .gutters-small{
        @extend %gutters_small;
    }
}

@if $gutters-medium == true{
    .gutters-medium{
        @extend %gutters_medium;
    }
}

@if $gutters-large == true{
    .gutters-large{
        @extend %gutters_large;
    }
}

@if $gutters-xlarge == true{
    .gutters-xlarge{
        @extend %gutters_xlarge;
    }
}





/*------------------------------------*\
    $GROUP ALIGNMENT MODIFIERS
\*------------------------------------*/
/**
 * Silent Extends
 */
%grid_top{
    align-items: flex-start;
}

%grid_bottom{
    align-items: flex-end;
}

%grid_center{
    align-items: center;
}


/**
 * If we need all cells in a grid to align to the
 * same location use these classes.
 *
 * Apply them with the .grid class.
 */
@if $grid--top == true{
    .grid--top{
        @extend %grid_top;
    }
}

@if $grid--bottom == true{
    .grid--bottom{
        @extend %grid_bottom;
    }
}

@if $grid--center == true{
    .grid--center{
        @extend %grid_center;
    }
}





/*------------------------------------*\
    $SINGLE ALIGNMENT MODIFIERS
\*------------------------------------*/
/**
 * Silent Extends
 */
%grid_item_top{
    align-self: flex-start;
}

%grid_item_bottom{
    align-self: flex-end;
}

%grid_item_center{
    align-self: center;
}


/**
 * If we need single cells in a grid to align to a
 * specific location use these classes.
 *
 * Apply them with the .grid__item class.
 */
@if $grid__item--top == true{
    .grid__item--top{
        @extend %grid_item_top;
    }
}

@if $grid__item--bottom == true{
    .grid__item--bottom{
        @extend %grid_item_bottom;
    }
}

@if $grid__item--center == true{
    .grid__item--center{
        @extend %grid_item_center;
    }
}





/*------------------------------------*\ 
    $RESPONSIVE
\*------------------------------------*/

@mixin grid-media-query($media-query){
    $breakpoint-found: false;

    @each $breakpoint in $breakpoints{
        $name: nth($breakpoint, 1);
        $declaration: nth($breakpoint, 2);

        @if $media-query == $name and $declaration{
            $breakpoint-found: true;

            @media only screen and #{$declaration}{
                @content;
            }
        }
    }

    @if $breakpoint-found == false{
        @warn "Breakpoint '#{$media-query}' does not exist"
    }
}


/**
 * Create our width classes, prefixed by the specified namespace.
 */
@mixin device-type($namespace:""){

    /**
     * Whole
     */
    .grid--#{$namespace}-full > .grid__item      { flex: 0 0 100%; }
    .grid__item--#{$namespace}-full              { width: 100%; flex: none !important; }


    /**
     * Half
     */
    .grid--#{$namespace}-halves > .grid__item    { flex: 0 0 50%; }
    .grid__item--#{$namespace}-half              { width: 50%; flex: none !important; }


    /**
     * Third
     */
    .grid--#{$namespace}-thirds > .grid__item    { flex: 0 0 33.3333%; }
    .grid__item--#{$namespace}-third             { width: 33.3333%; flex: none !important; }


    /**
     * Quarter
     */
    .grid--#{$namespace}-quarters > .grid__item  { flex: 0 0 25%; }
    .grid__item--#{$namespace}-quarter           { width: 25%; flex: none !important; }


    /**
     * Fifth
     */
    .grid--#{$namespace}-fifths > .grid__item    { flex: 0 0 20%; }
    .grid__item--#{$namespace}-fifth             { width: 20%; flex: none !important; }


    /**
     * Responsive Gutters
     */
    @if $responsive-gutters == true{
        /**
         * Gutter Small
         */
        .gutters--#{$namespace}-small{
            margin-left: -1em;
            & > .grid__item {
                padding-left: 1em;
                margin-bottom: 1em;
            }
        }

        /**
         * Gutter Medium
         */
        .gutters--#{$namespace}-medium{
            margin-left: -1.5em;
            & > .grid__item {
                padding-left: 1.5em;
                margin-bottom: 1.5em;
            }
        }

        /**
         * Gutter Large
         */
        .gutters--#{$namespace}-large{
            margin-left: -2em;
            & > .grid__item {
                padding-left: 2em;
                margin-bottom: 2em;
            }
        }

        /**
         * Gutter xLarge
         */
        .gutters--#{$namespace}-xlarge{
            margin-left: -3em;
            & > .grid__item {
                padding-left: 3em;
                margin-bottom: 3em;
            }
        }
    }
}


/**
 * Our responsive classes, if we have enabled them.
 */
@if $responsive == true{

    @each $name in $breakpoint-has-widths {
        @include grid-media-query($name) {
            @include device-type('#{$name}');
        }
    }


}





/*------------------------------------*\ 
    $HELP FIREFOX
\*------------------------------------*/

// Firefox doesn't yet support multiline Flexboxes so we
// have to fake it. Remove this once this bug is resolved
// https://bugzilla.mozilla.org/show_bug.cgi?id=702508
@supports not (flex-wrap: wrap) {
    .grid--ffMultilineSupport {
        display: block;
        & > .Grid-cell {
            display: inline-block;
            vertical-align: top;
        }
    }

    .grid--full {
        display: block;
        & > .Grid-cell {
            display: block;
        }
    }

    .grid--fit,
    .grid--1of2,
    .grid--1of3,
    .grid--1of4 {
        display: flex;
    }
}